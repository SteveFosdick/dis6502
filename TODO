TODO
====

- figure out why my disassembly of the Apple 1 Basic ROM is different
  from Eric Smith's disassembly

- produce a decent disassembly of *something*, probably the C64 Basic
  ROM

- get the memory allocation stuff under control, it's a tad bit weird
  to have all that static allocation stuff but then malloc()s for six
  bytes at a time?

- maybe correct the length of "illegal" opcodes? the question is whether
  that'll actually improve the disassembly of anything; need a test case
  that actually has/uses those opcodes for sure

- get the file handling stuff under control, it's also a bit messy

- that queue is not a queue, it's a stack; figure out what it really
  should be

- it would be nice to use my own .equ defines in the .def file; for example
  to define the label of a function and to .trace it in the next line without
  having to repeat the address itself

- it would also be nice to be able to load multiple binary files, for example
  the BASIC and KERNAL ROMS for the C64; there's quite a bit of refactoring
  to do for that though, ouch; adding it for raw files makes a lot of sense,
  maybe adding it for C64 and Atari files makes less sense since those get
  loaded to the same address and will conflict all the time; but if we have
  code to detect a conflict, well, it'll be up to the user to deal with that
  won't it?
